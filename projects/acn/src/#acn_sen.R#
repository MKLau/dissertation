###Final set of analyses for the ACN paper
###29 Jan 2014
###To be run up on Hoth

###Re-do labeling so that any thing at the:
##leaf scale has no suffix
##tree (add up the leaves for each tree) scale is labeled t
##int. (values summed up for each tree) is labled i
rm(list=ls())
source('~/projects/packages/cooc/src/cooc.R')
source('/Users/Aeolus/projects/packages/ComGenR/R/coNet.R')
library(vegan)
library(bipartite)
library(pbapply)
library(ComGenR)
                                        #reml
                                        #using notes from the following link
                                        #http://www.stat.wisc.edu/~ane/st572/notes/lec21.pdf
source('~/projects/packages/ComGenR_development/src/cgREML.R')
source('~/projects/packages/ComGenR_development/src/cgQAP.R')

## Load data
pit <- read.csv('~/projects/dissertation/projects/acn/data/arth_cooc_PIT_Lau.csv')
                                        #rempove trees with no leaves
pit <- pit[pit$tree!='np2.21',] # 7 leaves
pit <- pit[pit$tree!='np2.7',] # 7 leaves
pit <- pit[pit$tree!='np4.33',] #0 leaves
pit <- pit[pit$tree!='np13.10',] #0 leaves
                                        #genotype remove 1007
pit <- pit[pit$geno!='1007',]
pit$geno <- factor(as.character(pit$geno))
pit[is.na(pit)] <- 0
                                        #remove trailing 0
pit$tree <- sub('\\.0','\\.',pit$tree)
                                        #data verification of trees and genotypes
pg <- read.csv('~/projects/dissertation/docs/garden_information/PIT_garden_tree_information.csv')
pg <- pg[pg$Row!='DEAD',]
pg.tree <- as.character(pg$Row)
pg.tree <- sub('-','.',pg.tree)
pg.tree <- sub('NP','np',pg.tree)
                                        #pemphigus mergers
pit$pb.upper <- pit$pb.upper + pit$pb.woody
pb <- pit$pb.upper + pit$pb.lower
pit <- cbind(pit,pb=pb)
pit$pb.pred <- pit$pb.pred + pit$pb.hole + pit$pb.woody.pred
pit <- pit[,colnames(pit)!='pb.woody'&colnames(pit)!='pb.woody.pred'&colnames(pit)!='pb.hole'&colnames(pit)!='mite'&colnames(pit)!='pb.upper'&colnames(pit)!='pb.lower']
                                        #separate live and senescing leaves
pit.com <- pit[,-1:-7] #this removes tree info as well as fungus
geno <- pit[,3]
tree <- pit[,2]
type <- pit[,1]
obs <- split(pit.com,paste(tree,type))
tree.t <- as.character(sapply(names(obs),function(x) strsplit(x,split=' ')[[1]][1]))
type.t <- as.character(sapply(names(obs),function(x) strsplit(x,split=' ')[[1]][2]))
geno.t <- as.character(unlist(lapply(split(geno,paste(tree,type)),function(x) x[1])))
com.i <- do.call(rbind,lapply(obs,function(x) apply(x,2,sum)))
pbp <- tapply(pit$pb,paste(tree,type),function(x) sum(x)/length(x)) #percent pb
pbs.t <- tapply(pit$pb,tree,sum) #total across both leaf types
pbd.t <- tapply(pit$pb[type=='live'],tree[type=='live'],function(x) sum(x)/length(x)) - tapply(pit$pb[type=='sen'],tree[type=='sen'],function(x) sum(x)/length(x)) #percent difference
pbf <- tapply(pit$pb,paste(tree,type),table) #pemphigus frequencies
pbf <- do.call(rbind,lapply(pbf,function(x,n)c(x,rep(0,n-length(x))) , n=max(unlist(lapply(pbf,length)))))
pbf.liv <- do.call(rbind,lapply(lapply(split(pbf[type.t=='live',],geno.t[type.t=='live']),matrix,ncol=4),function(x) apply(x,2,sum)))
pbf.sen <- do.call(rbind,lapply(lapply(split(pbf[type.t=='sen',],geno.t[type.t=='sen']),matrix,ncol=4),function(x) apply(x,2,sum)))
rich.t <- apply(sign(com.i),1,sum)
com.rel.i <- apply(com.i,2,function(x) x/max(x))
dist.t <- as.matrix(vegdist(cbind(com.rel.i,ds=rep(min(com.rel.i[com.rel.i!=0]),nrow(com.rel.i)))))
dist.t <- dist.t[order(type.t),order(type.t)]
pdtype <- unlist(sapply(colnames(dist.t),function(x) strsplit(x,split=' ')[[1]][2]))
pd.t <- diag(dist.t[pdtype=='live',pdtype=='sen'])
sen.t <- unlist(lapply(split(pit$leaves,paste(tree,type)),function(x) x[1]))[type.t=='sen']

## Genetic effect on P. betae
                                        #effect of leaf type
t.test(pbd.t)
cgREML(pbd.t,geno.t[type.t=='live'])
                                        #total PB across live and senescent leaves
cgREML(pbs.t,geno.t[type.t=='live'])
                                        #test of PB~genotype by type
                                        #cgREML(pbp[type.t=='live'],geno.t[type.t=='live'])
                                        #cgREML((pbp[type.t=='sen']),geno.t[type.t=='sen'])
cgREML(log(pbp[type.t=='sen']-pbp[type.t=='live']+1),geno.t[type.t=='sen'])

                                        #genotype and percent pb density per leaf
pbfp <- t(apply(pbf,1,function(x) x/sum(x)))
cgREML((pbfp[type.t=='sen',1]-pbfp[type.t=='live',1]),geno.t[type.t=='sen'])
cgREML(sqrt(pbfp[type.t=='sen',2]-pbfp[type.t=='live',2]+0.02),geno.t[type.t=='sen'])
cgREML(sqrt(pbfp[type.t=='sen',3]-pbfp[type.t=='live',3]),geno.t[type.t=='sen'])

## Genotype effect on composition
adonis(cbind(com.rel.i,ds=rep(min(com.rel.i[com.rel.i!=0]),nrow(com.rel.i)))~geno.t*type.t,strata=tree.t)
liv.pp <- pair.permanova(cbind(com.rel.i,ds=rep(min(com.rel.i[com.rel.i!=0]),nrow(com.rel.i)))[type.t=='live',],geno.t[type.t=='live'])$p.mat
sen.pp <- pair.permanova(cbind(com.rel.i,ds=rep(min(com.rel.i[com.rel.i!=0]),nrow(com.rel.i)))[type.t=='sen',],geno.t[type.t=='sen'])$p.mat
liv.pp[liv.pp<=0.05] <- 1;liv.pp[liv.pp<1] <- 0
sen.pp[sen.pp<=0.05] <- 1;sen.pp[sen.pp<1] <- 0
liv.pp-sen.pp

###This will give you the effect of tree, which you're not really interested in anyway
#library(BiodiversityR)
#env.t <- data.frame(tree.t,geno.t,type.t)
#nested.npmanova(cbind(com.rel.i,ds=rep(min(com.rel.i[com.rel.i!=0]),nrow(com.rel.i)))~tree.t+geno.t,data=env.t,method='bray')

## Genetic effect on SES
                                        #test co-occurrence across trees
                                        #values from hoth script run
                                        #SES values ~ genotype
#Stand level co-occurrence patterns
cnm.liv.com <- cooc(com.i[type.t=='live',],nits=5000)
cnm.sen.com <- cooc(com.i[type.t=='sen',],nits=5000)
#cnm.liv.stand <- cooc(pit.com[pit$leaf.type=='live',],nits=5000)
#cnm.sen.stand <- cooc(pit.com[pit$leaf.type=='sen',],nits=5000)

###Araujo Networks
net.all <- coNet(pit.com)
net.sen <- coNet(pit.com[pit$leaf.type=='live',])
net.liv <- coNet(pit.com[pit$leaf.type=='sen',])

par(mfrow=c(1,3))
coord <- gplot(net.all,displaylabels=TRUE)
gplot(net.sen,coord=coord,displaylabels=TRUE)
gplot(net.liv,coord=coord,displaylabels=TRUE)

###Tree level SES
pit.q <- split(pit.com,paste(pit$tree,pit$leaf.type))
pq.type <- unlist(lapply(split(pit$leaf.type,paste(pit$tree,pit$leaf.type)),function(x)x[1]))
start <- Sys.time();pq.cnm <- lapply(pit.q[1:3],cooc,nits=1000);end <- Sys.time();end-start
cnm.live <- lapply(pit.q[pq.type=='live'],cooc,nits=5000)
save(cnm.live,file='../data/cnm_live.rda')
cnm.sen <- pblapply(pit.q[pq.type=='sen'],cooc,nits=5000)
save(cnm.sen,file='../data/cnm_sen.rda')

###Bipartite networks
mu.gliv <- apply(com.i[type.t=='live',],2,function(x,y) tapply(x,y,mean),y=geno.t[type.t=='live'])
mu.gsen <- apply(com.i[type.t=='sen',],2,function(x,y) tapply(x,y,mean),y=geno.t[type.t=='sen'])

#modularity
source('/Users/Aeolus/projects/dissertation/projects/lcn/src/getMods.R')
mod.gliv <- computeModules(apply(mu.gliv,2,function(x) if (all(x==0)){x}else{x/max(x)}))
mod.gsen <- computeModules(apply(mu.gsen,2,function(x) if (all(x==0)){x}else{x/max(x)}))
mods.gl <- getMods(mod.gliv)
mods.gs <- getMods(mod.gsen)
par(mfrow=c(1,2))
plotweb(mu.gliv[order(apply(mu.gliv,1,sum),decreasing=TRUE),order(apply(mu.gliv,2,sum),decreasing=TRUE)],method='normal',text.rot=90,col.low=mods.gl[[1]],col.high=mods.gl[[2]])
plotweb(mu.gsen[order(apply(mu.gsen,1,sum),decreasing=TRUE),order(apply(mu.gsen,2,sum),decreasing=TRUE)],method='normal',text.rot=90,col.low=mods.gs[[1]],col.high=mods.gs[[2]])

#nestedness

###
build.bpn <- function(x,alpha=0.05,p=0.001,adjust=FALSE){
  p.out <- apply(x,2,function(x) as.numeric(unlist(binom.test(sum(sign(x)),length(x),p=p))[3]))
  if (adjust){p.adjust(p.out,method='fdr')}
  x.out <- apply(sign(x),2,sum)/nrow(x)
  x.out[p.out>alpha] <- 0
  return(x.out)
}
acn.bpn <- do.call(rbind,lapply(obs,build.bpn))
colnames(acn.bpn) <- paste('S',1:ncol(acn.bpn),sep='')
acn.type <- unlist(sapply(rownames(acn.bpn),function(x) strsplit(x,split=' ')[[1]][2]))
cgPlotweb(acn.bpn[acn.type=='live',],geno.t[type.t=='live'])
cgPlotweb(acn.bpn[acn.type=='sen',],geno.t[type.t=='sen'])
                                        #bpn degree
bpd.t <- apply(sign(acn.bpn),1,sum)
cgREML(bpd.t[type.t=='live'],geno.t[type.t=='live'])
cgREML(bpd.t[type.t=='sen'],geno.t[type.t=='sen'])
                                        #total percent species max
tpsm.t <- apply(apply(acn.bpn,2,function(x) if(any(x!=0)){x/max(x)}else{x}),1,sum)
cgREML(tpsm.t[type.t=='live'],geno.t[type.t=='live'])
cgREML(tpsm.t[type.t=='sen'],geno.t[type.t=='sen'])
barplot(sort(tapply(tpsm.t[type.t=='live'],geno.t[type.t=='live'],mean),decreasing=TRUE))
                                        #tree level
read.csv('../results/acn_bpnnest_live.csv')
read.csv('../results/acn_bpnnest_sen.csv')
                                        #genotype level
gml.t <- mean.g(acn.bpn[type.t=='live',],geno.t[type.t=='live'])
gms.t <- mean.g(acn.bpn[type.t=='sen',],geno.t[type.t=='sen'])
gml.nest <- list()
gml.nest[[1]] <- oecosimu(gml.t,nestfun='nestedtemp',method='r00',nsimul=1000)
gml.nest[[2]] <- oecosimu(gml.t,nestfun='nestedtemp',method='r0',nsimul=1000)
gml.nest[[3]] <- oecosimu(gml.t,nestfun='nestedtemp',method='c0',nsimul=1000)
gml.nest[[4]] <- oecosimu(gml.t,nestfun='nestedtemp',method='r1',nsimul=1000)
gms.nest <- list()
gms.nest[[1]] <- oecosimu(gms.t,nestfun='nestedtemp',method='r00',nsimul=1000)
gms.nest[[2]] <- oecosimu(gms.t,nestfun='nestedtemp',method='r0',nsimul=1000)
gms.nest[[3]] <- oecosimu(gms.t,nestfun='nestedtemp',method='c0',nsimul=1000)
gms.nest[[4]] <- oecosimu(gms.t,nestfun='nestedtemp',method='r1',nsimul=1000)
                                        #modularity
bpn.liv <- acn.bpn[type.t=='live',]
rownames(bpn.liv) <- paste(rownames(bpn.liv),geno.t[type.t=='live'])
modules.liv <- computeModules(bpn.liv)
plotModuleWeb(modules.liv,rank=FALSE)
listModuleInformation(modules.liv)
printoutModuleInformation(modules.liv)
                                        #
nulls <- nullmodel(bpn.liv, N=100, method="r2d") 
modules.nulls <- sapply(nulls, computeModules) 
like.nulls <- sapply(modules.nulls, function(x) x@likelihood) 
(z <- (mod@likelihood - mean(like.nulls))/sd(like.nulls))
                                        #
## Co-occurrence network structure
net.t <- lapply(split(pit.com,type),CoNetwork)
for (i in 1:length(net.t)){
  rownames(net.t[[i]]) <- colnames(net.t[[i]]) <- paste('S',1:ncol(net.t[[i]]),sep='')
}
net.t <- reduce.net(net.t)
coord <- mgp(net.t[[1]],split(pit.com,type)[[1]],displaylabels=TRUE)
par(mfrow=c(1,1))
mgp(net.t[[1]],split(pit.com,type)[[1]],loc=FALSE,my.coord=coord,displaylabels=TRUE)
mgp(net.t[[2]],split(pit.com,type)[[2]],loc=FALSE,my.coord=coord,displaylabels=TRUE)
mgp(abs(net.t[[1]]-net.t[[2]]),pit.com,loc=FALSE,my.coord=coord,displaylabels=TRUE)
                                        #qap.test
qap.t <- cgQAP(net.t,nits=5000)
(qap.t$testval-mean(qap.t$dist))/sd(qap.t$dist)
c(qap.t$pleeq,1-qap.t$pleeq)
hist(qap.t$dist,xlim=c(0,20))
abline(v=net.dif(q,g1=1,g2=2))


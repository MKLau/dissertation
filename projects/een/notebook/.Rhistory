trees
dim(tree.pheno)
tree.pheno
x
x
length(x)
cnm.test
library(ComGenR)
cnm.test
out
out
out
out
out
out
setwd('../../../../packages/ComGenR/R/')
cgn.list
grepl(dir(),chars=c('~','\\#')
grepl(dir(),chars=c('~','\\#'))
grepl(dir(),c('~','\\#'))
grepl(dir(),'~')
grepl(dir()[1],'~')
sapply(dir(),grepl,pattern='~')
sapply(dir(),grepl,pattern='~')*sapply(dir(),grepl,pattern='\\#')
sapply(dir(),grepl,pattern='~')+sapply(dir(),grepl,pattern='\\#')
sapply(dir(),grepl,pattern='~')|sapply(dir(),grepl,pattern='\\#')
head(sim.nest)
sim.nest
sim.nest
selection
selection
selection
table(selection)
nest.mu
selection
selection
ex.split[[1]]
een.exp
selection
even.sym
even.sym[[1]]
obs.cen
nul.nest <- readLines('~/projects/pb_removal_nets/results/null_nest09c.txt'
)
head(nul.nest)
head(nul.nest)
nul.mods
obs.mod
nul.mod
obs.mod
z.nest
p.nest
z.mod
p.mod
library(bipartite)
pbr.09$c
nested(pbr.09$c)
nestedness(pbr.09$c)
apply(pb09c,2,sum)
any(apply(pb09c,2,sum)==0)
nested(pb09c)
nested(pb09c[,apply(pb09c,2,sum)!=0])
test=pb09c
test[test!=0] <- 1
nested(test)
nested(test)
nested(test)
nested(test)
nestedchecker(test)
nestedchecker(pb09c)
nestedchecker(pb09c[,apply(pb09c,2,sum)!=0])
obs.cs
?computeModules
q()
n
nulcs
nul.cs
test <- nul.cs
all(nul.cs==test)
head(nul.cs)
nul.cs=test
all(nul.cs==test)
nul.cs[1]
test
plot(test~nul.cs)
length(nul.cs)
length(test)
head(test)
head(nul.cs)
all(round(nul.cs,5)==round(test,5))
obs.cs
test=nul.cen
all(round(nul.cen,5)==round(test,5))
?computeModules
q()
n
getwd()
q()
n
owd
H
sim[[1]]
sim[[1]]
colnames(sim[[1]])
H
sum(sign(apply(pbr09c,2,sum)))
H.sim
E.sim
sim.type
?hist
e.obs
rm(e.obs)
e.obs
hb
E.obs
E.obs
E.sim
E.obs
E.sim[sim.type=='even']
mean(E.sim[sim.type=='even'])
mean(E.sim[sim.type=='asym'])
E.obs
tapply(E.sim,sim.type)
tapply(E.sim,sim.type,mean)
sd
?barplot2
barplot2(mu,plot.ci=TRUE,ci.l=mu-sd,ci.u=mu+sd,ylab='Community Evenness',names.arg=c('Asymptotic','Even'))
barplot2(mu,plot.ci=TRUE,ci.l=mu-sd,ci.u=mu+sd,ylab='Community Evenness',names.arg=c('Asymptotic','Even'))
mu
sd
E.obs
H.sim
tapply(H.sim,sim.type,mean)
H.obs
h.obs
tapply(H.sim,sim.type,mean)
mu <- tapply(H.sim,sim.type,mean)
sd <- tapply(H.sim,sim.type,sd)
abline(h=H.obs,lty=2)
mu.h
mu.h[1]
mu.h[2]-mu.h[1]
mu.h[2]-mu.h[1]/mu.h[1]
(mu.h[2]-mu.h[1])/mu.h[1]
(mu.h[2]-H.obs)/H.obs
t.test(H.sim,mu=H.obs)
t.test(H.sim[sim.type=='asym'],mu=H.obs)
t.test(H.sim[sim.type=='even'],mu=H.obs)
q()
n

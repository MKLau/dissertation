points(c(20,20),c(140,140))
lines(c(20,20),c(140,140))
contour(x,y,topo)
lines(c(20,20),c(140,140))
c(140,140)
points(c(20,140),c(20,140))
contour(x,y,topo)#
points(c(20,140),c(20,140))
lines(c(20,140),c(20,140))
points(c(20,140),c(20,140),pch=19)
heatmap(topo)
image(topo)
contour(x,y,topo)
image(topo)
contour(x,y,topo,add=TRUE)
image(t(topo))
contour(x,y,topo,add=TRUE)
image(x,y,t(topo))
contour(x,y,topo,add=TRUE)
points(c(20,140),c(20,140),pch=19)
lines(c(20,140),c(20,140))
lines(c(20,140),c(20,140),col='gray')
points(c(20,140),c(20,140),pch=19,col='gray')
image(x,y,t(topo))#
contour(x,y,topo,add=TRUE)#
points(c(20,140),c(20,140),pch=19,col='gray')#
lines(c(20,140),c(20,140),col='gray')
points(c(20,140),c(20,140),pch=19,col='white')
lines(c(20,140),c(20,140),col='white')
image(x,y,t(topo))#
contour(x,y,topo,add=TRUE)#
points(c(20,140),c(20,140),pch=19,col='white')#
lines(c(20,140),c(20,140),col='white')
lines(c(20,140),c(20,140),col='white',lty=2)
image(x,y,t(topo))#
contour(x,y,topo,add=TRUE)#
points(c(20,140),c(20,140),pch=19,col='white')#
lines(c(20,140),c(20,140),col='white',lty=2)
points(c(20,140),c(20,140),pch=19,col='violet')
lines(c(20,140),c(20,140),col='violet',lty=2)
image(x,y,t(topo),col=topo.colors)
image(x,y,t(topo),col=topo.colors(100))
contour(x,y,topo,add=TRUE)#
points(c(20,140),c(20,140),pch=19,col='gray')#
lines(c(20,140),c(20,140),col='gray',lty=2)
image(x,y,t(topo),col=topo.colors(1000))#
contour(x,y,topo,add=TRUE)#
points(c(20,140),c(20,140),pch=19,col='gray')#
lines(c(20,140),c(20,140),col='gray',lty=2)
points(c(20,140),c(20,140),pch=19,col='red')
points(c(20,140),c(20,140),pch=19,col='violet')
image(x,y,t(topo),col=topo.colors(1000))#
contour(x,y,topo,add=TRUE)#
points(c(20,140),c(20,140),pch=19,col='violet')#
lines(c(20,140),c(20,140),col='violet',lty=2)
by=1#
limits=c(0,500)#
#
x=seq(limits[1],limits[2],by=by)#
y=seq(limits[1],limits[2],by=by)#
#
plot(x,y)#
#
topo=array(0,c(length(x),length(y)))#
#
for (i in seq(along=x)){#
	for (j in seq(along=y)){#
		topo[i,j]=h(x[i],y[j])#
		}#
	}#
	#
image(x,y,t(topo),col=topo.colors(1000))#
contour(x,y,topo,add=TRUE)#
points(c(20,140),c(20,140),pch=19,col='violet')#
lines(c(20,140),c(20,140),col='violet',lty=2)
#
by=1#
limits=c(0,500)#
#
x=seq(limits[1],limits[2],by=by)#
y=seq(limits[1],limits[2],by=by)#
#
plot(x,y)#
#
topo=array(0,c(length(x),length(y)))#
#
for (i in seq(along=x)){#
	for (j in seq(along=y)){#
		if (i!=j){}else{#
		topo[i,j]=h(x[i],y[j])	#
			}#
		#
		}#
	}
limits=c(0,1000)#
#
x=seq(limits[1],limits[2],by=by)#
y=seq(limits[1],limits[2],by=by)#
#
plot(x,y)#
#
topo=array(0,c(length(x),length(y)))#
#
for (i in seq(along=x)){#
	for (j in seq(along=y)){#
		if (i!=j){}else{#
		topo[i,j]=h(x[i],y[j])	#
			}#
		#
		}#
	}
		topo
topo[topo!=0]
max(topo[topo!=0])
by=10#
limits=c(0,1600)#
#
x=seq(limits[1],limits[2],by=by)#
y=seq(limits[1],limits[2],by=by)#
#
topo=array(0,c(length(x),length(y)))#
#
for (i in seq(along=x)){#
	for (j in seq(along=y)){#
		if (i!=j){}else{#
		topo[i,j]=h(x[i],y[j])	#
			}#
		#
		}#
	}#
#
max(topo[topo!=0])
height=max(topo[topo!=0])
height
c.alt=max(topo[topo!=0])+0.001 #cruising altitude
c.alt
#Euler Problems#
#http://projecteuler.net#
#
h=function(x,y){#
	q=((x^2+y^2)/1000000)-((3*(x+y))/2000)+(7/10)#
	(5000-((x^2+y^2+x*y)/200)+((25*(x+y))/2))*exp(1)^(-abs(q))#
}#
#
by=10#
limits=c(0,1600)#
#
x=seq(limits[1],limits[2],by=by)#
y=seq(limits[1],limits[2],by=by)#
#
topo=array(0,c(length(x),length(y)))#
#
for (i in seq(along=x)){#
	for (j in seq(along=y)){#
		if (i!=j){}else{#
		topo[i,j]=h(x[i],y[j])	#
			}#
		#
		}#
	}#
#
c.alt=max(topo[topo!=0])+0.001 #cruising altitude
c.alt
max(topo[topo!=0])+0.001
max(topo[topo!=0])
+ 0.001
max(topo[topo!=0]) + 0.001
c.alt=round(max(topo[topo!=0]) + 0.001,3) #cruising altitude
c.alt
max(topo[topo!=0]) + 0.001
c.alt=signif(max(topo[topo!=0]) + 0.001,3) #cruising altitude
c.alt
c.alt=formatC(max(topo[topo!=0]) + 0.001,3) #cruising altitude
c.alt
max(topo[topo!=0])
c.alt=sprintf(max(topo[topo!=0])) #cruising altitude
c.alt=sprintf('%.3f',max(topo[topo!=0])) #cruising altitude
c.alt
sprintf('%.3f',max(topo[topo!=0]))
c.alt=sprintf('%.3f',max(topo[topo!=0])+1) #cruising altitude
c.alt
c.alt=sprintf('%.3f',(max(topo[topo!=0])+1)) #cruising altitude
c.alt=sprintf('%.3f',(max(topo[topo!=0])+1max(topo[topo!=0])+1)) #cruising altitude
c.alt=sprintf('%.3f',(max(topo[topo!=0])+1)) #cruising altitude
c.alt
c.alt=sprintf('%.3f',(max(topo[topo!=0])+0.001)) #cruising altitude
c.alt
A=c(200,200)#
B=c(1400,1400)#
by=10#
limits=c(0,1600)#
#
x=seq(limits[1],limits[2],by=by)#
y=seq(limits[1],limits[2],by=by)#
#
topo=array(0,c(length(x),length(y)))#
#
for (i in seq(along=x)){#
	for (j in seq(along=y)){#
		if (i!=j){}else{#
		topo[i,j]=h(x[i],y[j])	#
			}#
		#
		}#
	}
min(c(A[1],B[1]))
max(c(A[2],B[2])
)
max(c(A[2],B[2]))
j
A=c(200,200)#
B=c(1400,1400)#
by=10#
limits=c(0,1600)#
#
x=seq(limits[1],limits[2],by=by)#
y=seq(limits[1],limits[2],by=by)#
#
topo=array(0,c(length(x),length(y)))#
#
for (i in seq(along=x)){#
	for (j in seq(along=y)){#
		if (i!=j|i<=min(c(A[1],B[1]))|j>max(c(A[2],B[2]))){}else{#
		topo[i,j]=h(x[i],y[j])	#
			}#
		#
		}#
	}
topo
x
y
for (i in seq(along=x)){#
	for (j in seq(along=y)){#
		if (i!=j|i<=min(c(A[1],B[1]))|j>max(c(A[2],B[2]))){}else{#
		topo[i,j]=h(x[i],y[j])	#
			}#
		#
		}#
	}
		topo
topo=array(0,c(length(x),length(y)))
length(x)
x
rownames(topo)=x
topo
colnames(topo)=y
topo
for (i in seq(along=x)){#
	for (j in seq(along=y)){#
		if (i!=j|i<=min(c(A[1],B[1]))|j>max(c(A[2],B[2]))){}else{#
		topo[i,j]=h(x[i],y[j])	#
			}#
		#
		}#
	}
topo=topo[min(c(A[1],B[1])),max(c(A[2],B[2]))]
topo
min(c(A[1],B[1]))
rownames(topo)==min(c(A[1],B[1]))
image(topo)
j
rownames(topo)[i]
rownames(topo)[i]<=min(c(A[1],B[1]))
as.numeric(colnames(topo)[j])
max(c(A[2],B[2]))
for (i in seq(along=x)){#
	for (j in seq(along=y)){#
		if (i!=j|as.numeric(rownames(topo)[i])<=min(c(A[1],B[1]))|as.numeric(colnames(topo)[j])>max(c(A[2],B[2]))){}else{#
		topo[i,j]=h(x[i],y[j])	#
			}#
		#
		}#
	}
topo
image(topo)
image(topo,col=topo.colors(1000))
image(topo,col=topo.colors(100))
image(topo,col=topo.colors(10))
image(topo,col=topo.colors(5))
topo
#Euler Problems#
#http://projecteuler.net#
#
h=function(x,y){#
	q=((x^2+y^2)/1000000)-((3*(x+y))/2000)+(7/10)#
	(5000-((x^2+y^2+x*y)/200)+((25*(x+y))/2))*exp(1)^(-abs(q))#
}#
#
A=c(200,200)#
B=c(1400,1400)#
by=10#
limits=c(0,1600)#
#
x=seq(limits[1],limits[2],by=by)#
y=seq(limits[1],limits[2],by=by)#
#
topo=array(0,c(length(x),length(y)))#
rownames(topo)=x#
colnames(topo)=y#
#
for (i in seq(along=x)){#
	for (j in seq(along=y)){#
		if (i!=j|as.numeric(rownames(topo)[i])<=min(c(A[1],B[1]))|as.numeric(colnames(topo)[j])>max(c(A[2],B[2]))){}else{#
		topo[i,j]=h(x[i],y[j])	#
			}#
		#
		}#
	}
image(topo)
max(topo)
fmin=sprintf('%.3f',(max(topo)+0.001))
fmin
image(x,y,topo)
image(x,y,topo,xaxt=FALSE)
image(x,y,topo,xaxt=NULL)
image(x,y,topo,xaxt='none')
image(x,y,topo,xaxt='none',yaxt=='none')
image(x,y,topo,xaxt='none',yaxt='none')
axis(1,at=x)
axis(1,at=seq(x[1],x[length(x)],by=5))
image(x,y,topo,xaxt='none',yaxt='none')
axis(1,at=seq(x[1],x[length(x)],by=5))
image(x,y,topo,xaxt='none',yaxt='none')
axis(1,at=seq(x[1],x[length(x)],by=10))
image(x,y,topo,xaxt='none',yaxt='none')
axis(1,at=seq(x[1],x[length(x)],by=25))
axis(1,at=seq(x[1],x[length(x)],by=25),las=2)
image(x,y,topo,xaxt='none',yaxt='none')
axis(1,at=seq(x[1],x[length(x)],by=25),las=2)
axis(1,at=seq(x[1],x[length(x)],by=50),las=2)
image(x,y,topo,xaxt='none',yaxt='none')
axis(1,at=seq(x[1],x[length(x)],by=50),las=2)
image(x,y,topo,xaxt='none',yaxt='none')
axis(1,at=seq(x[1],x[length(x)],by=100),las=2)
axis(2,at=seq(x[1],x[length(x)],by=100),las=2)
dmin=((A[1]-B[1])^2)+(A[2]-B[2])^2
dmin=sqrt(((A[1]-B[1])^2)+(A[2]-B[2])^2)
(A[1]-B[1])
dmin=sqrt((((A[1]-B[1])^2)+(A[2]-B[2])^2))
dmin
library(rgl)
plot3d()
plot3d(x,y,topo)
surface3d(x,y,topo)
contour3d(x,y,topo)
terrain3d(x,y,topo)
persp3d(x,y,topo)
regl.surface(x,y,topo)
rgl.surface(x,y,topo)
quit()
a=gl(4,9)
a
length(a)
b=gl(4,9)
length(b)
y=rnorm(length(a))
y
fit1=aov(y~a+b)
summary(fit1)
names(fit1)
fit1$fitted.values
fitted(fit1)
a
b
a=as.numeric(a)
b=as.numeric(b)
aov(y~a+b)
fit2=aov(y~a+b)
summary(fit2)
a=factor(a)
a
b=factor(b)
fit1
fitted(fit1)
unique(fitted(fit1))
unique(round(fitted(fit1),3))
mean(y)
(y-mean(y))^2
residuals(fit1)
tapply(y,a,mean)
a
gl(9,4)
gl(4,3)
gl(3,4)
gl(3,4*2)
residuals(fit1)
y-mean(y)
(y-mean(y))^2
(y-mean(y))
fitted(fit1)
y-fitted(fit1)
residuals(fit1)
library(cars)
library(car)
confidence.ellipse()
confidence.ellipse
example(confidence.ellipse)
confidence.ellipse(fit1)
confidence.ellipse(fit1,Scheffe=TRUE)
confidence.ellipse(fit1)
confidenceEllipse(fit1)
confidenceEllipse(fit1,Scheffe=TRUE)
?confidenceEllipse
confidenceEllipse(fit1)
cE=confidenceEllipse(fit1)
cE
install.packages('VGSM')
install.packages('VGAM')
rbinom(10,2)
rbinom(10,2,0.5)
rbinom(10,1,0.5)
library(VGAm)
library(VGAM)
?
zipoisson
rzipois(10,50)
rzipois(10,5)
rzipois(10,5,10)
rzipois(10,5,1)
rzipois(10,5,0.5)
rzipois(10,50,0.5)
hist(rzipois(10,50,0.5))
hist(rzipois(10,50,0.1))
min(R.g)
R.g = c(3,15) #genotype number range#
R.n = c(3,15) #sample size range#
R.M = c(5,1000) #max species number range#
R.mu = c(5,1000) #species mean range#
R.phi = c(0,1) #zero probability range
min(R.g)
source('/Users/aeolus/Documents/R_Docs/Scripts/se.R')#
source('/Users/aeolus/Documents/R_Docs/Scripts/EcosimR/CU function.R')#
source('/Users/aeolus/Documents/R_Docs/Scripts/EcosimR/simIS.R')#
source('/Users/aeolus/Documents/R_Docs/Scripts/EcosimR/EcosimR.R')#
L2010=read.csv('/Users/Aeolus/Documents/Active_Projects/ONC Lichens/ONCLichenCooc2010.csv')
L2010
L.list=list()#
#
Lichen=L2010[,-1:-4]#
#
for (i in 1:nlevels(Tree)){#
	L.list[[i]]=Lichen[Tree==levels(Tree)[i],]#
	}#
#
names(L.list)=levels(Tree)
#ONC Lichen Data: collected 04May10 by L.J. Lamit and M.K. Lau. 10 cm^2 quadrats on the North and South of each tree placed at 0-10, 45-55, 80-90 cm. Lichen species were observed by L.J. Lamit, data was recorded by M.K. Lau. Lichen identifications were based on identifications of sample specimens by Rikke Naesborg.#
#
#
#Co-Occurrence Analysis#
source('/Users/aeolus/Documents/R_Docs/Scripts/se.R')#
source('/Users/aeolus/Documents/R_Docs/Scripts/EcosimR/CU function.R')#
source('/Users/aeolus/Documents/R_Docs/Scripts/EcosimR/simIS.R')#
source('/Users/aeolus/Documents/R_Docs/Scripts/EcosimR/EcosimR.R')#
L2010=read.csv('/Users/Aeolus/Documents/Active_Projects/ONC Lichens/ONCLichenCooc2010.csv')#
#
attach(L2010)#
colnames(L2010)#
#
barplot((table(Geno)/50)[order(table(Geno)/50,decreasing=TRUE)])#
sum(table(Geno)/50)#
summary(Tree)#
#
barplot(apply(L2010[,5:ncol(L2010)],2,sum),las=2)#
#
L.list=list()#
#
Lichen=L2010[,-1:-4]#
#
for (i in 1:nlevels(Tree)){#
	L.list[[i]]=Lichen[Tree==levels(Tree)[i],]#
	}#
#
names(L.list)=levels(Tree)
geno=character()#
#
for (i in 1:length(L.list)){#
	geno[i]=as.character(Geno[Tree==names(L.list)[i]][1])#
	}
L.list
L.list[[1]]
L.list[[6]]
L.cu
L.cu#
L.heat=L.cu[[1]]*0#
#
for (i in 1:length(L.cu)){#
	L.heat=L.heat+L.cu[[i]]#
	}
#ONC Lichen Data: collected 04May10 by L.J. Lamit and M.K. Lau. 10 cm^2 quadrats on the North and South of each tree placed at 0-10, 45-55, 80-90 cm. Lichen species were observed by L.J. Lamit, data was recorded by M.K. Lau. Lichen identifications were based on identifications of sample specimens by Rikke Naesborg.#
#
#
#Co-Occurrence Analysis#
source('/Users/aeolus/Documents/R_Docs/Scripts/se.R')#
source('/Users/aeolus/Documents/R_Docs/Scripts/EcosimR/CU function.R')#
source('/Users/aeolus/Documents/R_Docs/Scripts/EcosimR/simIS.R')#
source('/Users/aeolus/Documents/R_Docs/Scripts/EcosimR/EcosimR.R')#
L2010=read.csv('/Users/Aeolus/Documents/Active_Projects/ONC Lichens/ONCLichenCooc2010.csv')#
#
attach(L2010)#
colnames(L2010)#
#
barplot((table(Geno)/50)[order(table(Geno)/50,decreasing=TRUE)])#
sum(table(Geno)/50)#
summary(Tree)#
#
barplot(apply(L2010[,5:ncol(L2010)],2,sum),las=2)#
#
L.list=list()#
#
Lichen=L2010[,-1:-4]#
#
for (i in 1:nlevels(Tree)){#
	L.list[[i]]=Lichen[Tree==levels(Tree)[i],]#
	}#
#
names(L.list)=levels(Tree)#
#
geno=character()#
#
for (i in 1:length(L.list)){#
	geno[i]=as.character(Geno[Tree==names(L.list)[i]][1])#
	}#
#
#
#
#CU for every tree#
L.cu=list()#
for (i in 1:length(L.list)){#
	L.cu[[i]]=cu.pairs(t(L.list[[i]]))#
	}#
names(L.cu)=names(L.list)#
#
#Observed C Score for every tree#
cscore.=numeric()#
for (i in 1:length(names(L.cu))){#
	cscore.[i]=c.score(t(L.list[[i]]))#
	}
L.cu
L.cu[[6]]
L.list[[6]]
setwd('/Users/Aeolus/Documents/Active_Projects/ONC Lichens/')
L.data=read.csv('LCO_03May2011.csv') #lichen co-occur
L.data
L.data$pval.l
p.adjust(L.data$pval.l)
